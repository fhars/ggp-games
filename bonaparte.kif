;; -*- lisp -*-
; we restrict this game to three players
(role france)
(role germany)
(role russia)

(base spring)
(base autumn)
(base resource)
(<= (base (control ?p ?t)) (role ?p) (supply ?t))
(<= (base (army ?p ?t)) (role ?p) (territory ?t))

(<= (input ?r noop) (role ?r))
(<= (input ?r terminate) (role ?r))
(<= (input ?r (disband ?t)) (role ?r) (territory ?t))
(<= (input ?r (disband2 ?t1 ?t2)) (role ?r) (territory ?t1) (tlt ?t1 ?t2))
(<= (input ?r (disband3 ?t1 ?t2 ?t3)) (role ?r) (territory ?t1) (tlt ?t1 ?t2) (tlt ?t2 ?t3))
(<= (input ?r (disband4 ?t1 ?t2 ?t3 ?t4)) (role ?r) (territory ?t1) (tlt ?t1 ?t2) (tlt ?t2 ?t3) (tlt ?t3 t4))
(<= (input ?r (build1 ?s)) (home ?r ?s))
(<= (input ?r (build2 ?s ?t)) (home ?r ?s) (home ?r ?t) (tlt ?s ?t))

(<= (inp ?from (move ?from ?to)) (adjacent ?from ?to))
(<= (inp ?from (support_hold ?from ?to)) (adjacent ?from ?to))
(<= (inp ?from (support_move ?from ?other ?attack_from ?to))
    (role ?other)
    (adjacent ?attack_from ?to)
    (adjacent ?from ?to))
(<= (input ?p ?m) (role ?p) (inp ?t ?m))
(<= (input ?p (combine2 ?m1 ?m2))
    (role ?p)
    (inp ?t1 ?m1)
    (inp ?t2 ?m2)
    (tlt ?t1 ?t2))
(<= (input ?p (combine3 ?m1 ?m2 ?m3))
    (role ?p)
    (inp ?t1 ?m1)
    (inp ?t2 ?m2)
    (inp ?t3 ?m3)
    (tlt ?t1 ?t2)
    (tlt ?t2 ?t3))
(<= (input ?p (combine4 ?m1 ?m2 ?m3 ?m4))
    (role ?p)
    (inp ?t1 ?m1)
    (inp ?t2 ?m2)
    (inp ?t3 ?m3)
    (inp ?t4 ?m4)
    (tlt ?t1 ?t2)
    (tlt ?t2 ?t3)
    (tlt ?t3 ?t4))
(<= (input ?p (combine5 ?m1 ?m2 ?m3 ?m4 ?m5))
    (role ?p)
    (inp ?t1 ?m1)
    (inp ?t2 ?m2)
    (inp ?t3 ?m3)
    (inp ?t4 ?m4)
    (inp ?t5 ?m5)
    (tlt ?t1 ?t2)
    (tlt ?t2 ?t3)
    (tlt ?t3 ?t4)
    (tlt ?t4 ?t5))

; we follow the original model of a spring and autum turn every year
; and model the resource phase as a separate turn
;
; play starts in spring of year one and ends after 30 years.
(init spring)
(<= (next autumn) (true spring))
(<= (next resource) (true autumn))
(<= (next spring) (true resource))
(<= moving (true spring))
(<= moving (true autumn))

; control of supply centers changes in the resource phase
(<= (occupied ?s)
    (true (army ?p1 ?s))
    (true (control ?p2 ?s))
    (distinct ?p1 ?p2))
(<= (in_control ?p ?s)
    (true (control ?p ?s))
    (not (occupied ?s)))
(<= (in_control ?p ?s)
    (role ?p)
    (supply ?s)
    (true (army ?p ?s)))
(<= (next (control ?p ?s))
    (true (control ?p ?s))
    moving)
(<= (next (control ?p ?s))
    (in_control ?p ?s)
    (true resource))

;; the game terminates after 30 years, or if one player controls more
;; than half of the bases in the resource phase
(init (year 1))
(<= (next (year ?n)) (true (year ?m)) (succ ?m ?n) (true resource))
(<= (next (year ?n)) (true (year ?n)) moving)

(<= terminal (true (year 30)) (true resource))
(<= terminal (lt 5 ?n) (controls ?player ?n) (true resource))

(<= (count_supply ?p bel 0)
    (role ?p)
    (not (in_control ?p bel)))
(<= (count_supply ?p bel 1)
    (in_control ?p bel))

(<= (count_supply ?p ?t ?n)
    (not (in_control ?p ?t))
    (senum ?s ?t)
    (count_supply ?p ?s ?n))
(<= (count_supply ?p ?t ?n)
    (in_control ?p ?t)
    (senum ?s ?t)
    (succ ?m ?n)
    (count_supply ?p ?s ?m))

(<= (controls ?p ?n) (count_supply ?p war ?n))

(<= (count_armies ?p bel 0)
    (role ?p)
    (not (true (army ?p bel))))
(<= (count_armies ?p bel 1)
    (true (army ?p bel)))

(<= (count_armies ?p ?t ?n)
    (not (true (army ?p ?t)))
    (tenum ?s ?t)
    (count_armies ?p ?s ?n))
(<= (count_armies ?p ?t ?n)
    (true (army ?p ?t))
    (tenum ?s ?t)
    (succ ?m ?n)
    (count_armies ?p ?s ?m))

(<= (armies ?p ?n) (count_armies ?p war ?n))

(<= (goal ?p 100)
    (controls ?p ?n)
    (lt 5 ?n))

(<= (goal ?p 50)
    (controls ?p ?n)
    (controls ?p2 ?m)
    (controls ?p3 ?l)
    (distinct ?p ?p2)
    (distinct ?p ?p3)
    (distinct ?p2 ?p3)
    (lt ?n 6)
    (lt ?m ?n)
    (lt ?l ?n))

(<= (goal ?p 20)
    (controls ?p ?n)
    (controls ?p2 ?n)
    (controls ?p3 ?m)
    (distinct ?p ?p2) ; this is the only required distinct
                       ; constraint, the lt implies the other two
    (lt ?m ?n))

(<= (goal ?p 10)
    (controls ?p ?n)
    (controls ?p2 ?n)
    (controls ?p3 ?n)
    (distinct ?p ?p2)
    (distinct ?p ?p3)
    (distinct ?p2 ?p3))

(<= (goal ?p 0)
    (controls ?p ?n)
    (controls ?p2 ?m)
    (distinct ?p ?p2)
    (lt ?n ?m))

; At the start, every player controls their home supply bases and has
; one army in each
(<= (init (control ?p ?s)) (home ?p ?s) (role ?p) (supply ?s))
(<= (init (army ?p ?s)) (home ?p ?s) (role ?p) (supply ?s))

(<= (legal ?p noop) (role ?p) moving)
(<= (legal ?p noop) (sufficient_support ?p) (true resource))

(<= (sufficient_support ?p) (controls ?p ?n) (armies ?p ?n) (true resource))
(<= (sufficient_support ?p) (controls ?p ?n) (armies ?p ?m) (lt ?m ?n) (true resource))

(<= (legal ?p (build1 ?s))
    (in_control ?p ?s)
    (home ?p ?s)
    (controls ?p ?n)
    (armies ?p ?m)
    (lt ?m ?n)
    (not (true (army ?p ?s)))
    (true resource))
(<= (legal ?p (build2 ?s ?t))
    (in_control ?p ?s)
    (in_control ?p ?t)
    (home ?p ?s)
    (home ?p ?t)
    (distinct ?s ?t)
    (controls ?p ?n)
    (armies ?p ?m)
    (lt ?m ?l)
    (succ ?l ?n)
    (not (true (army ?p ?s)))
    (not (true (army ?p ?t)))
    (true resource))
(<= (legal ?p (disband ?t))
    (true (army ?p ?t))
    (controls ?p ?n)
    (lt 0 ?n)
    (armies ?p ?m)
    (succ ?n ?m)
    (true resource))
(<= (legal ?p (disband2 ?s ?t))
    (true (army ?p ?s))
    (true (army ?p ?t))
    (controls ?p ?n)
    (lt 0 ?n)
    (armies ?p ?m)
    (succ ?n ?x)
    (succ ?x ?m)
    (tlt ?s ?t)
    (true resource))
(<= (legal ?p (disband3 ?s ?t ?u))
    (true (army ?p ?s))
    (true (army ?p ?t))
    (true (army ?p ?u))
    (controls ?p ?n)
    (lt 0 ?n)
    (armies ?p ?m)
    (tlt ?s ?t)
    (tlt ?t ?u)
    (succ ?n ?x)
    (succ ?x ?y)
    (succ ?y ?m)
    (true resource))
(<= (legal ?p (disband4 ?s ?t ?u ?v))
    (true (army ?p ?s))
    (true (army ?p ?t))
    (true (army ?p ?u))
    (true (army ?p ?v))
    (controls ?p ?n)
    (lt 0 ?n)
    (armies ?p ?m)
    (tlt ?s ?t)
    (tlt ?t ?u)
    (tlt ?u ?v)
    (succ ?n ?x)
    (succ ?x ?y)
    (succ ?y ?z)
    (succ ?z ?m)
    (true resource))
(<= (legal ?p terminate)
    (controls ?p 0)
    (armies ?p ?m)
    (lt 0 ?m)
    (true resource))

(<= (disbanded ?t) (does ?p (disband ?t)))
(<= (disbanded ?t) (does ?p (disband2 ?t ?u)))
(<= (disbanded ?t) (does ?p (disband2 ?u ?t)))
(<= (disbanded ?t) (does ?p (disband3 ?t ?u ?v)))
(<= (disbanded ?t) (does ?p (disband3 ?u ?t ?v)))
(<= (disbanded ?t) (does ?p (disband3 ?u ?v ?t)))
(<= (disbanded ?t) (does ?p (disband4 ?t ?u ?v ?w)))
(<= (disbanded ?t) (does ?p (disband4 ?u ?t ?v ?w)))
(<= (disbanded ?t) (does ?p (disband4 ?u ?v ?t ?w)))
(<= (disbanded ?t) (does ?p (disband4 ?u ?v ?w ?t)))
(<= (disbanded ?t) (true (army ?p ?t)) (does ?p terminate))

(<= (next (disb ?t)) (disbanded ?t))
(<= (next (army ?p ?t)) (true (army ?p ?t)) (true resource) (not (disbanded ?t)))
(<= (next (army ?p ?t)) (does ?p (build1 ?t)) (true resource))
(<= (next (army ?p ?t)) (does ?p (build2 ?t ?s)) (true resource))
(<= (next (army ?p ?t)) (does ?p (build2 ?s ?t)) (true resource))

(<= (lgl ?p ?from (move ?from ?to))
    (true (army ?p ?from))
    (adjacent ?from ?to)
    (not (army ?p ?to))
    moving)

(<= (lgl ?p ?from (support_hold ?from ?to))
    (true (army ?p ?from))
    (true (army ?anyone ?to))
    (role ?anyone)
    (adjacent ?from ?to)
    moving)

(<= (lgl ?p ?from (support_move ?from ?other ?attack_from ?to))
    (true (army ?p ?from))
    (true (army ?other ?attack_from))
    (adjacent ?from ?to)
    (adjacent ?attack_from ?to)
    (distinct ?from ?attack_from)
    moving)

; Move a single piece
(<= (legal ?p ?move) (lgl ?p ?i ?move))
(<= (ordered_move ?p ?from ?to) (does ?p (move ?from ?to)))
(<= (ordered_support ?p ?from ?to) (does ?p (support_hold ?from ?to)))
(<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (support_move ?from ?p2 ?af ?to)))

; Move two pieces simultaneously
(<= (legal ?p (combine2 ?move1 ?move2))
    (lgl ?p ?i ?move1) (lgl ?p ?j ?move2)
    (tlt ?i ?j))
(<= (ordered_move ?p ?from ?to) (does ?p (combine2 (move ?from ?to) ?other)))
(<= (ordered_move ?p ?from ?to) (does ?p (combine2 ?other (move ?from ?to))))
(<= (ordered_support ?p ?from ?to) (does ?p (combine2 (support_hold ?from ?to) ?other)))
(<= (ordered_support ?p ?from ?to) (does ?p (combine2 ?other (support_hold ?from ?to))))
(<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine2 (support_move ?from ?p2 ?af ?to) ?other)))
(<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine2 ?other (support_move ?from ?p2 ?af ?to))))

; Move three pieces simultaneously - totally kills the online gamestepper
(<= (legal ?p (combine3 ?move1 ?move2 ?move3))
    (lgl ?p ?i ?move1) (lgl ?p ?j ?move2) (lgl ?p ?k ?move3)
    (tlt ?i ?j) (tlt ?j ?k))
(<= (ordered_move ?p ?from ?to) (does ?p (combine3 (move ?from ?to) ?other ?other2)))
(<= (ordered_move ?p ?from ?to) (does ?p (combine3 ?other (move ?from ?to) ?other2)))
(<= (ordered_move ?p ?from ?to) (does ?p (combine3 ?other ?other2 (move ?from ?to))))
(<= (ordered_support ?p ?from ?to) (does ?p (combine3 (support_hold ?from ?to) ?other ?other2)))
(<= (ordered_support ?p ?from ?to) (does ?p (combine3 ?other (support_hold ?from ?to) ?other2)))
(<= (ordered_support ?p ?from ?to) (does ?p (combine3 ?other ?other2 (support_hold ?from ?to))))
(<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine3 (support_move ?from ?p2 ?af ?to) ?other ?other2)))
(<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine3 ?other (support_move ?from ?p2 ?af ?to) ?other2)))
(<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine3 ?other ?other2 (support_move ?from ?p2 ?af ?to))))

;; ; Move four pieces simultaneously
;; (<= (legal ?p (combine4 ?move1 ?move2 ?move3 ?move4))
;;     (lgl ?p ?i ?move1) (lgl ?p ?j ?move2) (lgl ?p ?k ?move3) (lgl ?p ?l ?move4)
;;     (tlt ?i ?j) (tlt ?j ?k) (tlt ?k ?l))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine4 (move ?from ?to) ?other ?other2 ?other3)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine4 ?other (move ?from ?to) ?other2 ?other3)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine4 ?other ?other2 (move ?from ?to) ?other3)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine4 ?other ?other2 ?other3 (move ?from ?to))))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine4 (support_hold ?from ?to) ?other ?other2 ?other3)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine4 ?other (support_hold ?from ?to) ?other2 ?other3)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine4 ?other ?other2 (support_hold ?from ?to) ?other3)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine4 ?other ?other2 ?other3 (support_hold ?from ?to))))
;; (<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine4 (support_move ?from ?p2 ?af ?to) ?other ?other2 ?other3)))
;; (<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine4 ?other (support_move ?from ?p2 ?af ?to) ?other2 ?other3)))
;; (<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine4 ?other ?other2 (support_move ?from ?p2 ?af ?to) ?other3)))
;; (<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine4 ?other ?other2 ?other3 (support_move ?from ?p2 ?af ?to))))

;; ; Move five pieces simultaneously - almost brings the ggp-base prover state machine to its knees
;; (<= (legal ?p (combine5 ?move1 ?move2 ?move3 ?move4 ?move5))
;;     (lgl ?p ?i ?move1) (lgl ?p ?j ?move2) (lgl ?p ?k ?move3) (lgl ?p ?l ?move4) (lgl ?p ?m ?move5)
;;     (tlt ?i ?j) (tlt ?j ?k) (tlt ?k ?l) (tlt ?k ?m))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine5 (move ?from ?to) ?other ?other2 ?other3 ?other4)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine5 ?other (move ?from ?to) ?other2 ?other3 ?other4)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine5 ?other ?other2 (move ?from ?to) ?other3 ?other4)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine5 ?other ?other2 ?other3 (move ?from ?to) ?other4)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine5 ?other ?other2 ?other3 ?other4 (move ?from ?to))))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine5 (support_hold ?from ?to) ?other ?other2 ?other3 ?other4)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine5 ?other (support_hold ?from ?to) ?other2 ?other3 ?other4)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine5 ?other ?other2 (support_hold ?from ?to) ?other3 ?other4)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine5 ?other ?other2 ?other3 (support_hold ?from ?to) ?other4)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine5 ?other ?other2 ?other3 ?other4 (support_hold ?from ?to))))
;; (<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine5 (support_move ?from ?p2 ?af ?to) ?other ?other2 ?other3 ?other4)))
;; (<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine5 ?other (support_move ?from ?p2 ?af ?to) ?other2 ?other3 ?other4)))
;; (<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine5 ?other ?other2 (support_move ?from ?p2 ?af ?to) ?other3 ?other4)))
;; (<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine5 ?other ?other2 ?other3 (support_move ?from ?p2 ?af ?to) ?other4)))
;; (<= (ordered_attack_support ?p ?from ?p2 ?af ?to) (does ?p (combine5 ?other ?other2 ?other3 ?other4 (support_move ?from ?p2 ?af ?to))))

(<= (next (omv ?p ?f ?t)) (ordered_move ?p ?f ?t))
(<= (next (ohs ?p ?f ?t)) (ordered_support ?p ?f ?t))
(<= (next (osm ?p ?f ?p2 ?af ?t)) (ordered_attack_support ?p ?f ?p2 ?af ?t))

; a support order is void if the army is under attack, except if it is
; itself participating in an attack on the attacker
(<= (support_void ?t)
    (true (army ?p ?t))
    (ordered_move ?p2 ?from ?t)
    (distinct ?p ?p2)
    (territory ?af)
    (role ?p3)
    (not (ordered_attack_support ?p ?t ?p3 ?af ?from)))

; count the number of units defending this one
(<= (supported_def ?p ?from ?t)
    (true (army ?p ?t))
    (ordered_support ?p2 ?from ?t))

(<= (defended ?t bel 2)
    (true (army ?p ?t))
    (not (support_void bel))
    (supported_def ?p bel ?t))

(<= (defended ?t bel 1)
    (true (army ?p ?t))
    (not (supported_def ?p bel ?t)))

(<= (defended ?t bel 1)
    (true (army ?p ?t))
    (support_void bel))

(<= (defended ?t ?fromt ?n)
    (true (army ?p ?t))
    (not (support_void ?fromt))
    (supported_def ?p ?fromt ?t)
    (tenum ?prev ?fromt)
    (succ ?m ?n)
    (defended ?t ?prev ?m))

(<= (defended ?t ?fromt ?m)
    (true (army ?p ?t))
    (not (supported_def ?p ?fromt ?t))
    (tenum ?prev ?fromt)
    (defended ?t ?prev ?m))

(<= (defended ?t ?fromt ?m)
    (true (army ?p ?t))
    (support_void ?fromt)
    (tenum ?prev ?fromt)
    (defended ?t ?prev ?m))

(<= (defense_strength ?t ?n)
    (true (army ?p ?t))
    (ordered_move ?p2 ?any ?t)
    (distinct ?p ?p2)
    (defended ?t war ?n))

;;(<= (defense_strength ?t 0)
;;    (not (army ?p ?t)))

(<= (supported_att ?p ?t ?from)
    (ordered_move ?p ?any ?t)
    (ordered_attack_support ?p2 ?from ?p ?any ?t))

(<= (attacked ?p ?t bel 1)
    (ordered_move ?p bel ?t))

(<= (attacked ?p ?t bel 1)
    (not (support_void bel))
    (supported_att ?p ?t bel))

(<= (attacked ?p ?t bel 0)
    (role ?p)
    (territory ?t)
    (not (true (army ?p bel)))
    (not (supported_att ?p ?t bel)))

(<= (attacked ?p ?t bel 0)
    (support_void bel)
    (supported_att ?p ?t bel))


(<= (attacked ?p ?t ?from ?n)
    (ordered_move ?p ?from ?t)
    (tenum ?prev ?from)
    (succ ?m ?n)
    (attacked ?p ?t ?prev ?m))

(<= (attacked ?p ?t ?from ?n)
    (not (support_void ?from))
    (supported_att ?p ?t ?from)
    (tenum ?prev ?from)
    (succ ?m ?n)
    (attacked ?p ?t ?prev ?m))

(<= (attacked ?p ?t ?from ?m)
    (role ?p)
    (territory ?t)
    (not (true (army ?p ?from)))
    (not (supported_att ?p ?t ?from))
    (tenum ?prev ?from)
    (attacked ?p ?t ?prev ?m))

(<= (attacked ?p ?t ?from ?m)
    (support_void ?from)
    (supported_att ?p ?t ?from)
    (tenum ?prev ?from)
    (attacked ?p ?t ?prev ?m))

(<= (attack_strength ?p ?t ?n)
    (ordered_move ?p ?any ?t)
    (attacked ?p ?t war ?n))

(<= (next (zz_supp_d ?p ?f ?t)) (supported_def ?p ?f ?t))
(<= (next (zz_supp_a ?p ?t ?f)) (supported_att ?p ?t ?f))
;; (<= (next (zz_att ?t ?from ?n)) (attacked russia ?t ?from ?n))
;; (<= (next (zz_def ?t ?from ?n)) (defended ?t ?from ?n))

(<= (next (zz_str_att ?p ?t ?n)) (attack_strength ?p ?t ?n))
(<= (next (zz_str_def ?t ?n)) (defense_strength ?t ?n))
(<= (next (zz_void ?t)) (support_void ?t))

(<= (next (zz_supp ?p ?t ?f)) (supported ?p ?t ?f))

(<= (destroyed ?t)
    (true (army ?p ?t))
    (attack_strength ?p2 ?t ?att)
    (defense_strength ?t ?def)
    (lt ?def ?att))

(<= (next (dst ?t ?a ?d)) (destroyed ?t) (attack_strength ?p ?t ?a) (defense_strength ?t ?d))

; TODO: honor attack strength for contested moves

(<= (contested ?to)
    (ordered_move ?p ?from ?to)
    (ordered_move ?p2 ?from2 ?to)
    (not (action_void ?from))
    (not (action_void ?from2))
    (distinct ?from ?from2))

(<= (uncontested ?p ?from ?to)
    (ordered_move ?p ?from ?to)
    (not (action_void ?from))
    (not (contested ?to))
    (not (true (army ?any ?to))))

(<= (uncontested ?p ?from ?to)
    (ordered_move ?p ?from ?to)
    (not (action_void ?from))
    (not (contested ?to))
    (destroyed ?to))

(<= (chained ?p ?from ?to)
    (ordered_move ?p ?from ?to)
    (not (action_void ?from))
    (not (contested ?to))
    (moved_away ?to)
    (role ?p2)
    (territory ?to2))

(<= (occupied ?t)  (role ?p) (true (army ?p ?t)))
(<= (moved_away ?t) (territory ?t) (destroyed ?t))
(<= (moved_away ?t) (territory ?t) (territory ?anywhere) (role ?p) (uncontested ?p ?t ?anywhere) (moved_away ?anywhere))
(<= (moved_away ?t) (territory ?t) (chained ?p ?t ?anywhere))
(<= (moved_away ?t) (territory ?t) (not (occupied ?t)))

(<= (next (zz_unc ?p ?from ?t)) (uncontested ?p ?from ?t))
(<= (next (zz_cha ?p ?from ?t)) (chained ?p ?from ?t))
(<= (next (zz_ma ?t)) (moved_away ?t))

(<= (next (army ?p ?to))
    (uncontested ?p ?from ?to)
    (moved_away ?to)
    moving)
(<= (next (army ?p ?t))
    (true (army ?p ?t))
    (not (moved_away ?t))
    moving)

(adjacent bre gas)
(adjacent bre par)
(adjacent bre pic)
(adjacent gas par)
(adjacent gas mar)
(adjacent par pic)
(adjacent bur gas)
(adjacent bur mar)
(adjacent bur par)
(adjacent bur pic)
(adjacent bur ruh)
(adjacent bur mun)
(adjacent bel bur)
(adjacent bel pic)
(adjacent bel hol)
(adjacent bel ruh)
(adjacent hol kie)
(adjacent hol ruh)
(adjacent mar pie)
(adjacent kie ruh)
(adjacent kie mun)
(adjacent ber kie)
(adjacent ber mun)
(adjacent ber pru)
(adjacent ber sil)
(adjacent mun ruh)
(adjacent mun tyr)
(adjacent mun sil)
(adjacent pru sil)
(adjacent pru war)
(adjacent sil war)
(adjacent pie tyr)
(adjacent pie tus)
(adjacent pie ven)
(adjacent tyr vie)
(adjacent boh sil)
(adjacent boh gal)
(adjacent boh vie)
(adjacent boh tyr)
(adjacent boh mun)
(adjacent bud gal)
(adjacent bud tri)
(adjacent bud vie)
(adjacent tri tyr)
(adjacent tri vie)
(adjacent gal war)
(adjacent gal ukr)
(adjacent gal vie)
(adjacent gal sil)
(adjacent lvn stp)
(adjacent lvn mos)
(adjacent lvn war)
(adjacent lvn pru)
(adjacent mos stp)
(adjacent mos sev)
(adjacent mos ukr)
(adjacent mos war)
(adjacent sev ukr)
(adjacent ukr war)

; reverse, explicit for gamechecker

(adjacent gas bre)
(adjacent par bre)
(adjacent pic bre)
(adjacent par gas)
(adjacent mar gas)
(adjacent pic par)
(adjacent gas bur)
(adjacent mar bur)
(adjacent par bur)
(adjacent pic bur)
(adjacent ruh bur)
(adjacent mun bur)
(adjacent bur bel)
(adjacent pic bel)
(adjacent hol bel)
(adjacent ruh bel)
(adjacent kie hol)
(adjacent ruh hol)
(adjacent pie mar)
(adjacent ruh kie)
(adjacent mun kie)
(adjacent kie ber)
(adjacent mun ber)
(adjacent pru ber)
(adjacent sil ber)
(adjacent ruh mun)
(adjacent tyr mun)
(adjacent sil mun)
(adjacent sil pru)
(adjacent war pru)
(adjacent war sil)
(adjacent tyr pie)
(adjacent tus pie)
(adjacent ven pie)
(adjacent vie tyr)
(adjacent sil boh)
(adjacent gal boh)
(adjacent vie boh)
(adjacent tyr boh)
(adjacent mun boh)
(adjacent gal bud)
(adjacent tri bud)
(adjacent vie bud)
(adjacent tyr tri)
(adjacent vie tri)
(adjacent war gal)
(adjacent ukr gal)
(adjacent vie gal)
(adjacent sil gal)
(adjacent stp lvn)
(adjacent mos lvn)
(adjacent war lvn)
(adjacent pru lvn)
(adjacent stp mos)
(adjacent sev mos)
(adjacent ukr mos)
(adjacent war mos)
(adjacent ukr sev)
(adjacent war ukr)

(territory bel)
(territory ber)
(territory boh)
(territory bre)
(territory bud)
(territory bur)
(territory gal)
(territory gas)
(territory hol)
(territory kie)
(territory lvn)
(territory mar)
(territory mos)
(territory mun)
(territory par)
(territory pic)
(territory pie)
(territory pru)
(territory ruh)
(territory sev)
(territory sil)
(territory stp)
(territory swe)
(territory tri)
(territory tus)
(territory tyr)
(territory ukr)
(territory ven)
(territory vie)
(territory war)

(tenum bel ber)
(tenum ber boh)
(tenum boh bre)
(tenum bre bud)
(tenum bud bur)
(tenum bur gal)
(tenum gal gas)
(tenum gas hol)
(tenum hol kie)
(tenum kie lvn)
(tenum lvn mar)
(tenum mar mos)
(tenum mos mun)
(tenum mun par)
(tenum par pic)
(tenum pic pie)
(tenum pie pru)
(tenum pru ruh)
(tenum ruh sev)
(tenum sev sil)
(tenum sil stp)
(tenum stp swe)
(tenum swe tri)
(tenum tri tus)
(tenum tus tyr)
(tenum tyr ukr)
(tenum ukr ven)
(tenum ven vie)
(tenum vie war)

(<= (tlt ?a ?b) (tenum ?a ?b))
(<= (tlt ?a ?b) (tenum ?a ?x) (tlt ?x ?b))

(supply bel)
(supply ber)
(supply bud)
(supply hol)
(supply mar)
(supply mos)
(supply mun)
(supply par)
(supply ven)
(supply vie)
(supply war)

(senum bel ber)
(senum ber bud)
(senum bud hol)
(senum hol mar)
(senum mar mos)
(senum mos mun)
(senum mun par)
(senum par ven)
(senum ven vie)
(senum vie war)

(home france par)
(home france mar)
(home germany ber)
(home germany mun)
(home russia mos)
(home russia war)

; some arithmetics
(<= (lt ?a ?b) (succ ?a ?b))
(<= (lt ?a ?b) (succ ?a ?c) (lt ?c ?b))
(succ 0 1)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)
(succ 20 21)
(succ 21 22)
(succ 22 23)
(succ 23 24)
(succ 24 25)
(succ 25 26)
(succ 26 27)
(succ 27 28)
(succ 28 29)
(succ 29 30)
