;; -*- lisp -*-
; we restrict this game to three players
(role france)
(role germany)
(role russia)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Administrativa: base and input relations
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(base spring)
(base autumn)
(base resource)
(<= (base (control ?p ?t)) (role ?p) (supply ?t))
(<= (base (army ?p ?t)) (role ?p) (territory ?t))

(<= (input ?r noop) (role ?r))
(<= (input ?r terminate) (role ?r))
(<= (input ?r (disband ?t)) (role ?r) (territory ?t))
(<= (input ?r (disband2 ?t1 ?t2)) (role ?r) (territory ?t1) (tlt ?t1 ?t2))
(<= (input ?r (disband3 ?t1 ?t2 ?t3)) (role ?r) (territory ?t1) (tlt ?t1 ?t2) (tlt ?t2 ?t3))
(<= (input ?r (disband4 ?t1 ?t2 ?t3 ?t4)) (role ?r) (territory ?t1) (tlt ?t1 ?t2) (tlt ?t2 ?t3) (tlt ?t3 ?t4))
(<= (input ?r (build1 ?s)) (home ?r ?s))
(<= (input ?r (build2 ?s ?t)) (home ?r ?s) (home ?r ?t) (slt ?s ?t))

(<= (inp ?from (move ?from ?to)) (adjacent ?from ?to))
(<= (inp ?from (support_hold ?from ?to)) (adjacent ?from ?to))
(<= (inp ?from (support_move ?from ?attack_from ?to))
    (adjacent ?attack_from ?to)
    (adjacent ?from ?to))
(<= (input ?p ?m) (role ?p) (inp ?t ?m))
(<= (input ?p (combine2 ?m1 ?m2))
    (role ?p)
    (inp ?t1 ?m1)
    (inp ?t2 ?m2)
    (tlt ?t1 ?t2))
(<= (input ?p (combine3 ?m1 ?m2 ?m3))
    (role ?p)
    (inp ?t1 ?m1)
    (inp ?t2 ?m2)
    (inp ?t3 ?m3)
    (tlt ?t1 ?t2)
    (tlt ?t2 ?t3))
;; (<= (input ?p (combine4 ?m1 ?m2 ?m3 ?m4))
;;     (role ?p)
;;     (inp ?t1 ?m1)
;;     (inp ?t2 ?m2)
;;     (inp ?t3 ?m3)
;;     (inp ?t4 ?m4)
;;     (tlt ?t1 ?t2)
;;     (tlt ?t2 ?t3)
;;     (tlt ?t3 ?t4))
;; (<= (input ?p (combine5 ?m1 ?m2 ?m3 ?m4 ?m5))
;;     (role ?p)
;;     (inp ?t1 ?m1)
;;     (inp ?t2 ?m2)
;;     (inp ?t3 ?m3)
;;     (inp ?t4 ?m4)
;;     (inp ?t5 ?m5)
;;     (tlt ?t1 ?t2)
;;     (tlt ?t2 ?t3)
;;     (tlt ?t3 ?t4)
;;     (tlt ?t4 ?t5))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Game setup and victory conditions
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; we follow the original model of a spring and autum turn every year
; and model the resource phase as a separate turn
;
; play starts in spring of year one.
(init spring)
(init (year 1))

; At the start, every player controls their home supply bases and has
; one army in each
(<= (init (control ?p ?s)) (home ?p ?s) (role ?p) (supply ?s))
(<= (init (army ?p ?s)) (home ?p ?s) (role ?p) (supply ?s))

; seasons are cyclic
(<= (next autumn) (true spring))
(<= (next resource) (true autumn))
(<= (next spring) (true resource))

; spring and autumn are movement phases
(<= moving (true spring))
(<= moving (true autumn))

; the number of the year is increased after each resource phase
; and stays the same in movement phases
(<= (next (year ?n)) (true (year ?m)) (succ ?m ?n) (true resource))
(<= (next (year ?n)) (true (year ?n)) moving)

; control of supply centers changes in the resource phase
;
; a supply center is occupied if an army of a non-controlling
; player is stationed there
; This is a helper predicate used in some negative conditions
; below.
(<= (occupied ?s)
    (true (army ?p1 ?s))
    (true (control ?p2 ?s))
    (distinct ?p1 ?p2))

; in_control is a helper predicate that says that a player is
; currently controling a supply base. It is used in the resource phase
; to check if control of a supply center changes or not.
;
; A player is in_control of a supply center if it controls it and no
; other player's army currently occupies it.
(<= (in_control ?p ?s)
    (true (control ?p ?s))
    (not (occupied ?s)))
;
; Alternatively, a player is in_control of a supply center if it has
; an army there.
(<= (in_control ?p ?s)
    (role ?p)
    (supply ?s)
    (true (army ?p ?s)))

; Control never changes in a movement phase
(<= (next (control ?p ?s))
    (true (control ?p ?s))
    moving)
;
; The player that is in_control of a supply center in the resource
; phase controls it in the next year
(<= (next (control ?p ?s))
    (in_control ?p ?s)
    (true resource))

; the game terminates after 30 years, or if one player controls more
; than half of the eleven bases in the resource phase (i.e., more
; than five)
(<= terminal (true (year 30)) (true resource))
(<= terminal (lt 5 ?n) (controls ?player ?n) (true resource))

; Counting controlled supply centers is actually not quite trivial.
;
; To do it, we use two explicitly defined enummerations, one for the
; numbers (see the relations num and succ below), and one for the
; supply centers (supply and senum below). The relation succ allow us
; to count, and senum allows us to enummerate all supply centers in
; alphabetical order.
;
; So the following rules first check if a player is in control of
; Belgium and count either 0 or 1:
(<= (count_supply ?p bel 0)
    (role ?p)
    (not (in_control ?p bel)))
(<= (count_supply ?p bel 1)
    (in_control ?p bel))
;
; Then they check for every one of the following supply centers if the
; player controls them and either leave the number ?m of supply
; centers controlled so far unchanged if the player is not in control:
(<= (count_supply ?p ?t ?m)
    (not (in_control ?p ?t))
    (senum ?s ?t)
    (count_supply ?p ?s ?m))
; or set them to the successor (succ ?m ?n) of ?m (i.e., add one) if
; the player is in control:
(<= (count_supply ?p ?t ?n)
    (in_control ?p ?t)
    (senum ?s ?t)
    (succ ?m ?n)
    (count_supply ?p ?s ?m))
; (note that we use (in_control ?p ?t) and not (true (control ?p ?t))
; here, as that is the relation that is true at the begin of the
; resource phase when we check the victory condition, (true (control
; ?p ?t)) will only hold in the next spring phase. The tests of the
; current state are done in in_control.)
;
; The number of all supply centers controlled by a player it the the
; number of supply centers controlled when enumerated up to Warsaw:
(<= (controls ?p ?n) (count_supply ?p war ?n))

; We use the same technique to count all the armies of a player,
; except that we now iterate over all territories (relations territory
; and tenum below). Coincidentally, Belgium and Warsaw are also the
; first and last territory in alphabetical order.
(<= (count_armies ?p bel 0)
    (role ?p)
    (not (true (army ?p bel))))
(<= (count_armies ?p bel 1)
    (true (army ?p bel)))

(<= (count_armies ?p ?t ?n)
    (not (true (army ?p ?t)))
    (tenum ?s ?t)
    (count_armies ?p ?s ?n))
(<= (count_armies ?p ?t ?n)
    (true (army ?p ?t))
    (tenum ?s ?t)
    (succ ?m ?n)
    (count_armies ?p ?s ?m))

(<= (armies ?p ?n) (count_armies ?p war ?n))

; Goal values
;
; A full win if a player controls more than five supply centers:
(<= (goal ?p 100)
    (controls ?p ?n)
    (lt 5 ?n))
;
; Half the points if a player controls more supply centers than any
; other player after 30 years:
(<= (goal ?p 50)
    (controls ?p ?n)
    (controls ?p2 ?m)
    (controls ?p3 ?l)
    (distinct ?p ?p2)
    (distinct ?p ?p3)
    (distinct ?p2 ?p3)
    (lt ?n 6)
    (lt ?m ?n)
    (lt ?l ?n))
;
; Twenty points if two players tie after 30 years, but control more
; supply centers than the third player:
(<= (goal ?p 20)
    (controls ?p ?n)
    (controls ?p2 ?n)
    (controls ?p3 ?m)
    (distinct ?p ?p2) ; this is the only required distinct
                       ; constraint, the lt implies the other two
    (lt ?m ?n))
;
; Ten points if all players tie (which requires two two supply centers
; will never be controlled during the whole 30 years, which would not
; speak well for the playing strength of the players)
(<= (goal ?p 10)
    (controls ?p ?n)
    (controls ?p2 ?n)
    (controls ?p3 ?n)
    (distinct ?p ?p2)
    (distinct ?p ?p3)
    (distinct ?p2 ?p3))
;
; No point if anyone controls more:
(<= (goal ?p 0)
    (controls ?p ?n)
    (controls ?p2 ?m)
    (distinct ?p ?p2)
    (lt ?n ?m))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; The resource phase
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; It is always legal to do nothing in the resource phase if a player
; controls at least as many supply centers as it has armies (the
; relation le belongs to num and succ below).
(<= (legal ?p noop)
    (armies ?p ?m)
    (controls ?p ?n)
    (le ?m ?n)
    (true resource))

; If a player has fewer armies than it controls supply centers in the
; resource phase, it may build a new army in one of its home supply
; centers, if it still is in control of it and it is currently empty:
(<= (legal ?p (build1 ?s))
    (in_control ?p ?s)
    (home ?p ?s)
    (controls ?p ?n)
    (armies ?p ?m)
    (lt ?m ?n)
    (not (true (army ?p ?s)))
    (true resource))
;
; If a player has at least two fewer armies than it controls supply
; centers in the resource phase (the conditions (lt ?m ?l) (succ ?l
; ?n) say that the number of armies ?m is less than a number ?l that
; is the predecessor of the number of supply centers ?n, which is a
; slightly roundabout way of saying ?m is at least two smaller than
; ?n), it may build a new army in each one of its home supply centers,
; if it still is in control of them and they are currently empty:
(<= (legal ?p (build2 ?s ?t))
    (in_control ?p ?s)
    (in_control ?p ?t)
    (home ?p ?s)
    (home ?p ?t)
    (slt ?s ?t)
    (controls ?p ?n)
    (armies ?p ?m)
    (lt ?m ?l)
    (succ ?l ?n)
    (not (true (army ?p ?s)))
    (not (true (army ?p ?t)))
    (true resource))
;
; If the player is in control of a least one supply center (lt 0 ?n),
; and has exactly one army more than supply centers, it must disband
; one army:
(<= (legal ?p (disband ?t))
    (true (army ?p ?t))
    (controls ?p ?n)
    (lt 0 ?n)
    (armies ?p ?m)
    (succ ?n ?m)
    (true resource))
;
; If it is in control of two fewer supply centers (see the two succ
; terms linked by the ?x variable), it must disband two armies (the
; condition (tlt ?s ?t) ensures that for each pair of armies only one
; legal move is generated, by enforcing that the armies must be given
; in alphabetical order):
(<= (legal ?p (disband2 ?s ?t))
    (true (army ?p ?s))
    (true (army ?p ?t))
    (controls ?p ?n)
    (lt 0 ?n)
    (armies ?p ?m)
    (succ ?n ?x)
    (succ ?x ?m)
    (tlt ?s ?t)
    (true resource))
;
; The same for a difference of three:
(<= (legal ?p (disband3 ?s ?t ?u))
    (true (army ?p ?s))
    (true (army ?p ?t))
    (true (army ?p ?u))
    (controls ?p ?n)
    (lt 0 ?n)
    (armies ?p ?m)
    (tlt ?s ?t)
    (tlt ?t ?u)
    (succ ?n ?x)
    (succ ?x ?y)
    (succ ?y ?m)
    (true resource))
;
; and four:
(<= (legal ?p (disband4 ?s ?t ?u ?v))
    (true (army ?p ?s))
    (true (army ?p ?t))
    (true (army ?p ?u))
    (true (army ?p ?v))
    (controls ?p ?n)
    (lt 0 ?n)
    (armies ?p ?m)
    (tlt ?s ?t)
    (tlt ?t ?u)
    (tlt ?u ?v)
    (succ ?n ?x)
    (succ ?x ?y)
    (succ ?y ?z)
    (succ ?z ?m)
    (true resource))
;
; We could continue with a difference of five, but that is redundant:
; if a player has five more armies than supply centers, it must have
; had five centers the previous year and zero now (otherwise it would
; have won the previous year), and that case is covered by the
; following rule.
;
; If a player controls no supply center, it is can only give up:
(<= (legal ?p terminate)
    (controls ?p 0)
    (armies ?p ?m)
    (lt 0 ?m)
    (true resource))

; Destructure the disband<n> moves into statements over individual
; armies. An army in territory ?t is disbanded if it is either
; directly mentioned in a disband<n> move:
(<= (disbanded ?t) (does ?p (disband ?t)))
(<= (disbanded ?t) (does ?p (disband2 ?t ?u)))
(<= (disbanded ?t) (does ?p (disband2 ?u ?t)))
(<= (disbanded ?t) (does ?p (disband3 ?t ?u ?v)))
(<= (disbanded ?t) (does ?p (disband3 ?u ?t ?v)))
(<= (disbanded ?t) (does ?p (disband3 ?u ?v ?t)))
(<= (disbanded ?t) (does ?p (disband4 ?t ?u ?v ?w)))
(<= (disbanded ?t) (does ?p (disband4 ?u ?t ?v ?w)))
(<= (disbanded ?t) (does ?p (disband4 ?u ?v ?t ?w)))
(<= (disbanded ?t) (does ?p (disband4 ?u ?v ?w ?t)))
;
; or the player is eliminated:
(<= (disbanded ?t) (true (army ?p ?t)) (does ?p terminate))

; An army that is currently in territory ?t survies into the next
; spring if it is not disbanded:
(<= (next (army ?p ?t)) (true (army ?p ?t)) (true resource) (not (disbanded ?t)))
;
; Create new armies for build orders:
(<= (next (army ?p ?t)) (does ?p (build1 ?t)) (true resource))
(<= (next (army ?p ?t)) (does ?p (build2 ?t ?s)) (true resource))
(<= (next (army ?p ?t)) (does ?p (build2 ?s ?t)) (true resource))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; The movement phase: legal moves
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; It is always legal to do nothing in the movement phase.
(<= (legal ?p noop) (role ?p) moving)

; First we define a helper relation lgl for action commands for armies
; that has the same structure as the built-in legal relation, except
; that it also keeps track of the army the action is legal for.
;
; There are three different kind of actions an army can be commanded
; to perform: to move to (or attack) another territory, to support an
; army in an adjacent territory in its defense, or to support another
; army in its attack on an adjacent territory. Support can be given to
; any army, not just the player's own armies.
;
(<= (lgl ?p ?from (move ?from ?to))
    (true (army ?p ?from))
    (adjacent ?from ?to)
    moving)
(<= (lgl ?p ?from (support_hold ?from ?to))
    (true (army ?p ?from))
    (true (army ?anyone ?to))
    (role ?anyone)
    (adjacent ?from ?to)
    moving)
(<= (lgl ?p ?from (support_move ?from ?attack_from ?to))
    (true (army ?p ?from))
    (true (army ?any ?attack_from))
    (adjacent ?from ?to)
    (adjacent ?attack_from ?to)
    (distinct ?from ?attack_from)
    moving)

; If a move is lgl in the above sense, it is also legal to perform
; that move:
(<= (legal ?p ?move) (lgl ?p ?i ?move))
;
; If a player did such a single move, we record that in one of three
; helper relations that in this case just duplicate the information from the
; does relation:
(<= (ordered_move ?p ?from ?to) (does ?p (move ?from ?to)))
(<= (ordered_support ?p ?from ?to) (does ?p (support_hold ?from ?to)))
(<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (support_move ?from ?af ?to)))

; If a player has two lgl moves, it is legal to combine them in a
; single move, where the (tlt ?i ?j) condition says that the commands
; must be given in alphabetical order. This eliminates both giving
; conflicting commands to the same unit, and loads of redundant
; combinations that only differ in the (irrelevant) order of the
; commands. It is of course still possible to give useless commands
; (like commanding two armies to both support the other army's attack
; on some other territory, which both obviously do not perform), but
; that is of course legal.
(<= (legal ?p (combine2 ?move1 ?move2))
    (lgl ?p ?i ?move1) (lgl ?p ?j ?move2)
    (tlt ?i ?j))
;
; Like above, such a combination move must be decomposed into the
; three helper relations:
(<= (ordered_move ?p ?from ?to) (does ?p (combine2 (move ?from ?to) ?other)))
(<= (ordered_move ?p ?from ?to) (does ?p (combine2 ?other (move ?from ?to))))
(<= (ordered_support ?p ?from ?to) (does ?p (combine2 (support_hold ?from ?to) ?other)))
(<= (ordered_support ?p ?from ?to) (does ?p (combine2 ?other (support_hold ?from ?to))))
(<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine2 (support_move ?from ?af ?to) ?other)))
(<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine2 ?other (support_move ?from ?af ?to))))

; The same thing for three lgl moves (this is where simpler GDL
; implementations start to fail, the online gamestepper completely
; chokes if you include this part of the rules):
(<= (legal ?p (combine3 ?move1 ?move2 ?move3))
    (lgl ?p ?i ?move1) (lgl ?p ?j ?move2) (lgl ?p ?k ?move3)
    (tlt ?i ?j) (tlt ?j ?k))
(<= (ordered_move ?p ?from ?to) (does ?p (combine3 (move ?from ?to) ?other ?other2)))
(<= (ordered_move ?p ?from ?to) (does ?p (combine3 ?other (move ?from ?to) ?other2)))
(<= (ordered_move ?p ?from ?to) (does ?p (combine3 ?other ?other2 (move ?from ?to))))
(<= (ordered_support ?p ?from ?to) (does ?p (combine3 (support_hold ?from ?to) ?other ?other2)))
(<= (ordered_support ?p ?from ?to) (does ?p (combine3 ?other (support_hold ?from ?to) ?other2)))
(<= (ordered_support ?p ?from ?to) (does ?p (combine3 ?other ?other2 (support_hold ?from ?to))))
(<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine3 (support_move ?from ?af ?to) ?other ?other2)))
(<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine3 ?other (support_move ?from ?af ?to) ?other2)))
(<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine3 ?other ?other2 (support_move ?from ?af ?to))))

;; ; And if you are adventurous or have a really fast state machine
;; ; (like more than five orders of magnitude faster than the
;; ; ProverStateMachine in ggp-base), you can even allow the
;; ; combination of four and five simultaneous commands. The
;; ; decomposition in the three helper relations ensures that all the
;; ; following command resolution rules should continue to work.  You
;; ; may also have to uncomment the corresponding input rules at the
;; ; top of this file.
;;
;; ; Move four pieces simultaneously
;; (<= (legal ?p (combine4 ?move1 ?move2 ?move3 ?move4))
;;     (lgl ?p ?i ?move1) (lgl ?p ?j ?move2) (lgl ?p ?k ?move3) (lgl ?p ?l ?move4)
;;     (tlt ?i ?j) (tlt ?j ?k) (tlt ?k ?l))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine4 (move ?from ?to) ?other ?other2 ?other3)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine4 ?other (move ?from ?to) ?other2 ?other3)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine4 ?other ?other2 (move ?from ?to) ?other3)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine4 ?other ?other2 ?other3 (move ?from ?to))))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine4 (support_hold ?from ?to) ?other ?other2 ?other3)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine4 ?other (support_hold ?from ?to) ?other2 ?other3)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine4 ?other ?other2 (support_hold ?from ?to) ?other3)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine4 ?other ?other2 ?other3 (support_hold ?from ?to))))
;; (<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine4 (support_move ?from ?af ?to) ?other ?other2 ?other3)))
;; (<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine4 ?other (support_move ?from ?af ?to) ?other2 ?other3)))
;; (<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine4 ?other ?other2 (support_move ?from ?af ?to) ?other3)))
;; (<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine4 ?other ?other2 ?other3 (support_move ?from ?af ?to))))

;; ; Move five pieces simultaneously - almost brings the ggp-base prover state machine to its knees
;; (<= (legal ?p (combine5 ?move1 ?move2 ?move3 ?move4 ?move5))
;;     (lgl ?p ?i ?move1) (lgl ?p ?j ?move2) (lgl ?p ?k ?move3) (lgl ?p ?l ?move4) (lgl ?p ?m ?move5)
;;     (tlt ?i ?j) (tlt ?j ?k) (tlt ?k ?l) (tlt ?k ?m))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine5 (move ?from ?to) ?other ?other2 ?other3 ?other4)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine5 ?other (move ?from ?to) ?other2 ?other3 ?other4)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine5 ?other ?other2 (move ?from ?to) ?other3 ?other4)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine5 ?other ?other2 ?other3 (move ?from ?to) ?other4)))
;; (<= (ordered_move ?p ?from ?to) (does ?p (combine5 ?other ?other2 ?other3 ?other4 (move ?from ?to))))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine5 (support_hold ?from ?to) ?other ?other2 ?other3 ?other4)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine5 ?other (support_hold ?from ?to) ?other2 ?other3 ?other4)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine5 ?other ?other2 (support_hold ?from ?to) ?other3 ?other4)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine5 ?other ?other2 ?other3 (support_hold ?from ?to) ?other4)))
;; (<= (ordered_support ?p ?from ?to) (does ?p (combine5 ?other ?other2 ?other3 ?other4 (support_hold ?from ?to))))
;; (<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine5 (support_move ?from ?af ?to) ?other ?other2 ?other3 ?other4)))
;; (<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine5 ?other (support_move ?from ?af ?to) ?other2 ?other3 ?other4)))
;; (<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine5 ?other ?other2 (support_move ?from ?af ?to) ?other3 ?other4)))
;; (<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine5 ?other ?other2 ?other3 (support_move ?from ?af ?to) ?other4)))
;; (<= (ordered_attack_support ?p ?from ?af ?to) (does ?p (combine5 ?other ?other2 ?other3 ?other4 (support_move ?from ?af ?to))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; The movement phase: command resolution
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; A support order is void if the army is under attack, except if it is
; itself supporting an attack on the attacker
(<= (support_void ?t)
    (true (army ?p ?t))
    (ordered_move ?p2 ?from ?t)
    (distinct ?p ?p2)
    (territory ?af)
    (not (ordered_attack_support ?p ?t ?af ?from)))

; Count the number of units defending a given one.
;
; This does again use the count from Belgium to Warsaw pattern described above.
;
; First we need a helper relation that states that someone (we don't
; care who) supports the defense of an army:
(<= (supported_def ?p ?from ?t)
    (true (army ?p ?t))
    (ordered_support ?p2 ?from ?t))
;
; The initial defense strenght of an army is 2 it if is supported
; from Belgium (and the supporting unit in Belgium is not under attack
; itself)
(<= (defended ?t bel 2)
    (true (army ?p ?t))
    (not (support_void bel))
    (supported_def ?p bel ?t))
;
; and 1 if it is defending itself without support from Belgium; for
; which there are again two cases:
;
; Nobody supports the unit from belgium:
(<= (defended ?t bel 1)
    (true (army ?p ?t))
    (not (supported_def ?p bel ?t)))
;
; or the unit in Belgium is itself under attack and cannot support
; anyone:
(<= (defended ?t bel 1)
    (true (army ?p ?t))
    (support_void bel))
;
; The same three cases must be checked for all other territories from
; which the unit may be supported:
;
; Add one for successful support
(<= (defended ?t ?fromt ?n)
    (true (army ?p ?t))
    (not (support_void ?fromt))
    (supported_def ?p ?fromt ?t)
    (tenum ?prev ?fromt)
    (succ ?m ?n)
    (defended ?t ?prev ?m))
;
; and leave the number unchanged if no support has been ordered
(<= (defended ?t ?fromt ?m)
    (true (army ?p ?t))
    (not (supported_def ?p ?fromt ?t))
    (tenum ?prev ?fromt)
    (defended ?t ?prev ?m))
;
; or support is pevented by an attack
(<= (defended ?t ?fromt ?m)
    (true (army ?p ?t))
    (support_void ?fromt)
    (tenum ?prev ?fromt)
    (defended ?t ?prev ?m))
;
; The total defense strength is then again just the strength from all
; territories up to Warsaw:
(<= (defense_strength ?t ?n)
    (true (army ?p ?t))
    (ordered_move ?p2 ?any ?t) ; redundant, but may increase
                               ; performance as it will ensure that
                               ; there will only be defense_strengh
                               ; propositions for units that are
                               ; actually attacked
    (distinct ?p ?p2)
    (defended ?t war ?n))

; The calculation of the attack strength follows the same pattern
(<= (supported_att ?p ?from ?af ?to)
    (ordered_move ?p ?any ?t0)
    (ordered_attack_support ?p2 ?from ?af ?to))
;
; Only the case analysis is different.
;
(<= (attacked ?p bel bel ?to 1)
    (ordered_move ?p bel ?to))

(<= (attacked ?p bel ?af ?to 1)
    (territory ?af)
    (not (support_void bel))
    (supported_att ?p bel ?af ?to))

(<= (attacked ?p bel ?af ?to 0)
    (territory ?af)
    (role ?p)
    (territory ?to)
    (not (true (army ?p bel)))
    (not (supported_att ?p bel ?af ?to)))

(<= (attacked ?p bel ?af ?to 0)
    (territory ?af)
    (support_void bel)
    (supported_att ?p bel ?af ?to))

(<= (attacked ?p ?from ?af ?to ?n)
    (territory ?af)
    (ordered_move ?p ?from ?to)
    (tenum ?prev ?from)
    (succ ?m ?n)
    (attacked ?p ?prev ?af ?to ?m))

(<= (attacked ?p ?from ?af ?to ?n)
    (not (support_void ?from))
    (supported_att ?p ?from ?af ?to)
    (tenum ?prev ?from)
    (succ ?m ?n)
    (attacked ?p ?prev ?af ?to ?m))

(<= (attacked ?p ?from ?af ?to ?m)
    (territory ?af)
    (not (ordered_move ?p ?from ?to))
    (not (supported_att ?p ?from ?af ?to))
    (tenum ?prev ?from)
    (attacked ?p ?prev ?af ?to ?m))

(<= (attacked ?p ?from ?af ?to ?m)
    (support_void ?from)
    (supported_att ?p ?from ?af ?to)
    (tenum ?prev ?from)
    (attacked ?p ?prev ?af ?to ?m))

(<= (attack_strength ?p ?af ?to ?n)
    (ordered_move ?p ?af ?to)
    (attacked ?p war ?af ?to ?n))

; An army is destroyed if the strength of the attack on it is larger
; than its defense strength
(<= (destroyed ?t)
    (true (army ?p ?t))
    (attack_strength ?p2 ?af ?t ?att)
    (defense_strength ?t ?def)
    (lt ?def ?att))

; If several armies try to move into the same territory, only the army
; whith the highest attack strength is successful.
;
; For this we first need a helper relation that we can then use in the
; negative condition in victorious:
(<= (strength_matched ?p ?to)
    (attack_strength ?p ?af ?to ?n)
    (attack_strength ?p2 ?af2 ?to ?n2)
    (le ?n ?n2)
    (distinct ?p ?p2))
; Additionally, if a player is intelligent enough to move two armies into
; the same territory, no move will succeed
(<= (strength_matched ?p ?to)
    (ordered_move ?p ?from ?to)
    (ordered_move ?p ?from2 ?to)
    (distinct ?from ?from2))
(<= (victorious ?p ?from ?to)
    (ordered_move ?p ?from ?to)
    (not (strength_matched ?p ?to)))

; A move is contested if at least two armies have been ordered to move
; to the same territory
(<= (contested ?to)
    (ordered_move ?p ?from ?to)
    (ordered_move ?p2 ?from2 ?to)
    (distinct ?from ?from2))

; A move is possible:
;
; If the move is not contested and the target territory is now empty
(<= (move_possible ?p ?from ?to)
    (ordered_move ?p ?from ?to)
    (not (contested ?to))
    (now_empty ?to)
    (role ?p2))
;
; or if the army has maximal support for the move into the target
; territory and that territory is now empty
(<= (move_possible ?p ?from ?to)
    (ordered_move ?p ?from ?to)
    (victorious ?p ?from ?to)
    (now_empty ?to)
    (role ?p2))

; A territory is now empty if there is no army there, that army has
; been destroyed or can move away.
(<= (occupied ?t)  (role ?p) (true (army ?p ?t)))
(<= (now_empty ?t) (territory ?t) (destroyed ?t))
(<= (now_empty ?t) (role ?p) (territory ?t) (territory ?anywhere) (move_possible ?p ?t ?anywhere))
(<= (now_empty ?t) (territory ?t) (not (occupied ?t)))

; With all that in place, we can now say where the armies are in the
; next move after a movement phase:
;
; If an army can move in a territory, it will be there:
(<= (next (army ?p ?to))
    (move_possible ?p ?from ?to)
    moving)
;
; If there is already an army in that territory, and it doesn't go
; away, it will stay there:
(<= (next (army ?p ?t))
    (true (army ?p ?t))
    (not (now_empty ?t))
    moving)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Facts about the world: the game board and maths
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; First the game board, described as adjacency relation between
; territories:
(adjacent bre gas)
(adjacent bre par)
(adjacent bre pic)
(adjacent gas par)
(adjacent gas mar)
(adjacent par pic)
(adjacent bur gas)
(adjacent bur mar)
(adjacent bur par)
(adjacent bur pic)
(adjacent bur ruh)
(adjacent bur mun)
(adjacent bel bur)
(adjacent bel pic)
(adjacent bel hol)
(adjacent bel ruh)
(adjacent hol kie)
(adjacent hol ruh)
(adjacent mar pie)
(adjacent kie ruh)
(adjacent kie mun)
(adjacent ber kie)
(adjacent ber mun)
(adjacent ber pru)
(adjacent ber sil)
(adjacent mun ruh)
(adjacent mun tyr)
(adjacent mun sil)
(adjacent pru sil)
(adjacent pru war)
(adjacent sil war)
(adjacent pie tyr)
(adjacent pie tus)
(adjacent pie ven)
(adjacent tyr vie)
(adjacent boh sil)
(adjacent boh gal)
(adjacent boh vie)
(adjacent boh tyr)
(adjacent boh mun)
(adjacent bud gal)
(adjacent bud tri)
(adjacent bud vie)
(adjacent tri tyr)
(adjacent tri vie)
(adjacent gal war)
(adjacent gal ukr)
(adjacent gal vie)
(adjacent gal sil)
(adjacent lvn stp)
(adjacent lvn mos)
(adjacent lvn war)
(adjacent lvn pru)
(adjacent mos stp)
(adjacent mos sev)
(adjacent mos ukr)
(adjacent mos war)
(adjacent sev ukr)
(adjacent ukr war)

;; ; it should in theory be possible to make the adjacency relation symmetric with this rules,
;; ; but most GDL implementations get that type of recursion wrong
;; (<= (adjacent ?s ?t)
;;     (territory ?s)
;;     (territory ?t)
;;     (adjacent ?t ?s))
;; so lets do it the stupid way
(adjacent gas bre)
(adjacent par bre)
(adjacent pic bre)
(adjacent par gas)
(adjacent mar gas)
(adjacent pic par)
(adjacent gas bur)
(adjacent mar bur)
(adjacent par bur)
(adjacent pic bur)
(adjacent ruh bur)
(adjacent mun bur)
(adjacent bur bel)
(adjacent pic bel)
(adjacent hol bel)
(adjacent ruh bel)
(adjacent kie hol)
(adjacent ruh hol)
(adjacent pie mar)
(adjacent ruh kie)
(adjacent mun kie)
(adjacent kie ber)
(adjacent mun ber)
(adjacent pru ber)
(adjacent sil ber)
(adjacent ruh mun)
(adjacent tyr mun)
(adjacent sil mun)
(adjacent sil pru)
(adjacent war pru)
(adjacent war sil)
(adjacent tyr pie)
(adjacent tus pie)
(adjacent ven pie)
(adjacent vie tyr)
(adjacent sil boh)
(adjacent gal boh)
(adjacent vie boh)
(adjacent tyr boh)
(adjacent mun boh)
(adjacent gal bud)
(adjacent tri bud)
(adjacent vie bud)
(adjacent tyr tri)
(adjacent vie tri)
(adjacent war gal)
(adjacent ukr gal)
(adjacent vie gal)
(adjacent sil gal)
(adjacent stp lvn)
(adjacent mos lvn)
(adjacent war lvn)
(adjacent pru lvn)
(adjacent stp mos)
(adjacent sev mos)
(adjacent ukr mos)
(adjacent war mos)
(adjacent ukr sev)
(adjacent war ukr)

; For several rules (like the adjecency rule just above) we need a
; list of all territories to make them sound, obey the recursion
; restriction or be stratified:
(territory bel)
(territory ber)
(territory boh)
(territory bre)
(territory bud)
(territory bur)
(territory gal)
(territory gas)
(territory hol)
(territory kie)
(territory lvn)
(territory mar)
(territory mos)
(territory mun)
(territory par)
(territory pic)
(territory pie)
(territory pru)
(territory ruh)
(territory sev)
(territory sil)
(territory stp)
(territory swe)
(territory tri)
(territory tus)
(territory tyr)
(territory ukr)
(territory ven)
(territory vie)
(territory war)

; The tenum relation defines an ordering among territories, which is
; necessary for enumerating over territories, and to make combined
; moves unique, as described in the appropriate sections above.
(tenum bel ber)
(tenum ber boh)
(tenum boh bre)
(tenum bre bud)
(tenum bud bur)
(tenum bur gal)
(tenum gal gas)
(tenum gas hol)
(tenum hol kie)
(tenum kie lvn)
(tenum lvn mar)
(tenum mar mos)
(tenum mos mun)
(tenum mun par)
(tenum par pic)
(tenum pic pie)
(tenum pie pru)
(tenum pru ruh)
(tenum ruh sev)
(tenum sev sil)
(tenum sil stp)
(tenum stp swe)
(tenum swe tri)
(tenum tri tus)
(tenum tus tyr)
(tenum tyr ukr)
(tenum ukr ven)
(tenum ven vie)
(tenum vie war)

; If we have an ordering, we can also define a conparision operator
; for territories (whihc we use for making combined moves unique).
;
; A territory is less than another territory in this ordering if it is
; either the one before it in the enumeration
(<= (tlt ?a ?b) (tenum ?a ?b))
; or if its successor is less than the other one
(<= (tlt ?a ?b) (tenum ?a ?x) (tlt ?x ?b))

; The same construction for supply centers
(supply bel)
(supply ber)
(supply bud)
(supply hol)
(supply mar)
(supply mos)
(supply mun)
(supply par)
(supply ven)
(supply vie)
(supply war)

(senum bel ber)
(senum ber bud)
(senum bud hol)
(senum hol mar)
(senum mar mos)
(senum mos mun)
(senum mun par)
(senum par ven)
(senum ven vie)
(senum vie war)

(<= (slt ?a ?b) (senum ?a ?b))
(<= (slt ?a ?b) (senum ?a ?x) (slt ?x ?b))

; The home supply centers
(home france par)
(home france mar)
(home germany ber)
(home germany mun)
(home russia mos)
(home russia war)

; some arithmetics, again using the same pattern (numbers are nothing
; special in GDL, except in goal statements)

(<= (lt ?a ?b) (succ ?a ?b))
(<= (lt ?a ?b) (succ ?a ?c) (lt ?c ?b))

; The only new thing: a less or equal comparision relation
(<= (le ?a ?a) (num ?a))
(<= (le ?a ?b) (lt ?a ?b))

(num 0)
(num 1)
(num 2)
(num 3)
(num 4)
(num 5)
(num 6)
(num 7)
(num 8)
(num 9)
(num 10)
(num 11)
(num 12)
(num 13)
(num 14)
(num 15)
(num 16)
(num 17)
(num 18)
(num 19)
(num 20)
(num 21)
(num 22)
(num 23)
(num 24)
(num 25)
(num 26)
(num 27)
(num 28)
(num 29)
(num 30)
(succ 0 1)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)
(succ 20 21)
(succ 21 22)
(succ 22 23)
(succ 23 24)
(succ 24 25)
(succ 25 26)
(succ 26 27)
(succ 27 28)
(succ 28 29)
(succ 29 30)

;; ; Some debug relations you may or may not want to enable
;; (<= (next (zz_disb ?t)) (disbanded ?t))

;; (<= (next (zz_omv ?p ?f ?t)) (ordered_move ?p ?f ?t))
;; (<= (next (zz_ohs ?p ?f ?t)) (ordered_support ?p ?f ?t))
;; (<= (next (zz_osm ?p ?f ?af ?t)) (ordered_attack_support ?p ?f ?af ?t))

;; (<= (next (zz_supp_d ?p ?f ?t)) (supported_def ?p ?f ?t))
;; (<= (next (zz_supp_a ?p ?t ?f)) (supported_att ?p ?t ?f))
;; (<= (next (zz_att ?p mun ?from ?n)) (attacked ?p mun ?from ?n))
;; (<= (next (zz_def ?t ?from ?n)) (defended ?t ?from ?n))
;; (<= (next (zz_str_att ?p ?t ?n)) (attack_strength ?p ?t ?n))
;; (<= (next (zz_str_def ?t ?n)) (defense_strength ?t ?n))
;; (<= (next (zz_void ?t)) (support_void ?t))
;; (<= (next (zz_supp ?p ?t ?f)) (supported ?p ?t ?f))
;; (<= (next (zz_dst ?t ?a ?d)) (destroyed ?t) (attack_strength ?p ?t ?a) (defense_strength ?t ?d))
;; (<= (next (zz_mp ?p ?from ?t)) (move_possible ?p ?from ?t))
;; (<= (next (zz_ma ?t)) (moved_away ?t))
